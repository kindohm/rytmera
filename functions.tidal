-- test

let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    spike p = ((# delaytime (scale 0.001 0.3 $ slow 7.1 sine1)) . (# delayfeedback (scale 0.7 0.99 $ slow 6.71 sine1))) $ p
    spike' p = (# delay "0.3") $ spike $ p
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    jit start amount p = within (start, (start + 0.5)) (trunc (amount)) p
    gtfo p = (const $ sound "~") p
    gtfo' p = (const $ midinote "~") p
    gtfom = gtfo'
    gtfo2 = gtfo'
    shift p = (1024 <~)  p
    shift' x p = (x <~) p
    choose xs = (xs !!) <$> (irand $ fromIntegral $ length xs)
    one p = stut' 1 (0.125/2) (|*| gain "1") $ p
    one' p = rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    one'' p = sometimes (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    rep' n p = stut' (n-1) (0.125/2*3) (|*| gain "1") $ p
    rep'' n p = stut' (n-1) (0.125/4*3) (|*| gain "1") $ p
    beginend bpat durpat = (begin bpat) # (end $ (+) <$> bpat <*> durpat)
    ionian = [0,2,4,5,7,9,11]
    aeolian = [0,2,3,5,7,8,10]
    locrian = [0,1,3,5,6,8,10]
    phryg = [0,1,3,5,7,8,10]
    phryg2 = [0,1,3,5,7,8,10,12,13,15,17,19,20,22]
    lydian = [0,2,4,6,7,9,11]
    enig = [0,1,3,5,6,8,10,11]
    minor = [0,3,7]
    major = [0,4,7]
    whole = [0,2,4,6,8,10,12]
    _9 = [0,4,7,10,14]
    ninesus4 = [0,5,7,10,14]
    add9 = [0,4,7,14]
    madd9 = [0,3,7,14]
    maj9 = [0,4,7,11,14]
    m9 = [0,3,7,10,14]
    sus2 = [0,2,7]
    sus4 = [0,5,7]
    _7 = [0,4,7,10]
    m7 = [0,3,7,10]
    eleven = [0,4,7,10,14,17]
    _11 = [0,4,7,10,14,17]
    m11 = [0,3,7,10,14,17]
    _13 = [0,4,7,10,14,21]
    m13 = [0,3,7,10,14,21]
    mpent = [0, 3, 5, 7, 10, 12]
    pent = [0, 2, 4, 7, 9, 12]
    inverse 1 = 0
    inverse 0 = 1
    inverse 11 = 0
    inverse 10 = 1
    bpm x = bps (x/120)
    brakk samps = ((|=| unit "c") . (|=| speed "8")) $ sound (samples samps (irand 30))
    brakk4 samps = ((|=| unit "c") . (|=| speed "4")) $ sound (samples samps (irand 30))
    move p = foldEvery [3,4] (0.25 <~) $ p 
    move'' p = foldEvery [2,3] (0.25 <~) $ p
    move' p = foldEvery [3,4] (0.25 ~>) $ p 
    move''' p = foldEvery [2,3] (0.25 ~>) $ p 
    delays = [(1/512), (1/256), (1/128), (1/64), (1/32), (1/16), (1/8)]
    randDelay p = ((|=| delay (scale 0.5 0.7 $ shift' 5001 $ rand)) . (|=| delaytime (shift' 5002 $ choose delays)) . (|=| delayfeedback (scale 0.5 0.9 $ shift' 5003 $ rand))) $ p
    crumble = slow 2 $ sound "[k*16 ~]/2 ~" # n (run 32)
    rando = randDelay
    foldEVery = foldEvery 
    stupid = randDelay
    weird = randDelay
    fml = id
    lol = id
    ffs = id
    tfw = id
    u = id
    pls = id
    wot = id
    m8 = id
    conditionalsux = id
    accelrate = accelerate
    discretize = discretise
    fuckery p = every 5 (rip 0.5 0.1) $ every 6 (rip' 0 1 8 0.5 0.1) $ every 7 (|=| coarse "{4 8 6 12 16}%14") $ every 8 (|=| accelerate "-0.5 0.5") $ p
    crushit p = (|=| crush (scale 3 8 $ slow 1.1 tri)) $ p
    replicator text1 = [putStr (text1) | x <- replicate 3000 text1]
    flood text2 = sequence_(replicator text2)